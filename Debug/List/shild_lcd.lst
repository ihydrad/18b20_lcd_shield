
AVRASM ver. 2.1.30  C:\Documents and Settings\Admin\Рабочий стол\shild_lcd + DS18b20\Debug\List\shild_lcd.asm Sun Jul 24 13:38:43 2016

C:\Documents and Settings\Admin\Рабочий стол\shild_lcd + DS18b20\Debug\List\shild_lcd.asm(1090): warning: Register r3 already defined by the .DEF directive
C:\Documents and Settings\Admin\Рабочий стол\shild_lcd + DS18b20\Debug\List\shild_lcd.asm(1091): warning: Register r4 already defined by the .DEF directive
C:\Documents and Settings\Admin\Рабочий стол\shild_lcd + DS18b20\Debug\List\shild_lcd.asm(1092): warning: Register r6 already defined by the .DEF directive
C:\Documents and Settings\Admin\Рабочий стол\shild_lcd + DS18b20\Debug\List\shild_lcd.asm(1093): warning: Register r5 already defined by the .DEF directive
C:\Documents and Settings\Admin\Рабочий стол\shild_lcd + DS18b20\Debug\List\shild_lcd.asm(1094): warning: Register r8 already defined by the .DEF directive
C:\Documents and Settings\Admin\Рабочий стол\shild_lcd + DS18b20\Debug\List\shild_lcd.asm(1095): warning: Register r7 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega328P
                 ;Program type           : Application
                 ;Clock frequency        : 16,000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega328P
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x08FF
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _adc_data=R3
                 	.DEF _adc_data_msb=R4
                 	.DEF _but_state=R6
                 	.DEF __lcd_x=R5
                 	.DEF __lcd_y=R8
                 	.DEF __lcd_maxx=R7
                 
                 ;GPIOR0 INITIALIZATION VALUE
                 	.EQU __GPIOR0_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 005d 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 008c 	JMP  _timer2_ovf_isr
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0091 	JMP  _timer0_ovf_isr
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0096 	JMP  _adc_isr
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
                 
                 _gr:
000034 120c
000035 0c12
000036 0000
C:\Documents and Settings\Admin\Рабочий стол\shild_lcd + DS18b20\Debug\List\shild_lcd.asm(1135): warning: .cseg .db misalignment - padding zero byte
000037 0000      	.DB  0xC,0x12,0x12,0xC,0x0,0x0,0x0
                 _tbl10_G101:
000038 2710
000039 03e8
00003a 0064
00003b 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00003c 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00003d 1000
00003e 0100
00003f 0010
000040 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x0:
000041 6554
000042 706d
000043 3d20
000044 2520      	.DB  0x54,0x65,0x6D,0x70,0x20,0x3D,0x20,0x25
000045 6433
000046 4500
000047 7272
000048 726f      	.DB  0x33,0x64,0x0,0x45,0x72,0x72,0x6F,0x72
000049 7220
00004a 6165
00004b 0064
00004c 7453      	.DB  0x20,0x72,0x65,0x61,0x64,0x0,0x53,0x74
00004d 7261
00004e 6574
00004f 2e64
000050 2e2e      	.DB  0x61,0x72,0x74,0x65,0x64,0x2E,0x2E,0x2E
C:\Documents and Settings\Admin\Рабочий стол\shild_lcd + DS18b20\Debug\List\shild_lcd.asm(1147): warning: .cseg .db misalignment - padding zero byte
000051 0000      	.DB  0x0
                 _0x2000003:
000052 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000053 000b      	.DW  0x0B
000054 0300      	.DW  _0x27
000055 008d      	.DW  _0x0*2+11
                 
000056 000b      	.DW  0x0B
000057 030b      	.DW  _0x2A
000058 0098      	.DW  _0x0*2+22
                 
000059 0002      	.DW  0x02
00005a 0316      	.DW  __base_y_G100
00005b 00a4      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
00005c 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00005d 94f8      	CLI
00005e 27ee      	CLR  R30
00005f bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000060 e0f1      	LDI  R31,1
000061 bff5      	OUT  MCUCR,R31
000062 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000063 e08d      	LDI  R24,(14-2)+1
000064 e0a2      	LDI  R26,2
000065 27bb      	CLR  R27
                 __CLEAR_REG:
000066 93ed      	ST   X+,R30
000067 958a      	DEC  R24
000068 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000069 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00006a e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00006b e0a0      	LDI  R26,LOW(__SRAM_START)
00006c e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
00006d 93ed      	ST   X+,R30
00006e 9701      	SBIW R24,1
00006f f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000070 eae6      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000071 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000072 9185      	LPM  R24,Z+
000073 9195      	LPM  R25,Z+
000074 9700      	SBIW R24,0
000075 f061      	BREQ __GLOBAL_INI_END
000076 91a5      	LPM  R26,Z+
000077 91b5      	LPM  R27,Z+
000078 9005      	LPM  R0,Z+
000079 9015      	LPM  R1,Z+
00007a 01bf      	MOVW R22,R30
00007b 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00007c 9005      	LPM  R0,Z+
00007d 920d      	ST   X+,R0
00007e 9701      	SBIW R24,1
00007f f7e1      	BRNE __GLOBAL_INI_LOOP
000080 01fb      	MOVW R30,R22
000081 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;GPIOR0 INITIALIZATION
000082 e0e0      	LDI  R30,__GPIOR0_INIT
000083 bbee      	OUT  GPIOR0,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000084 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000085 bfed      	OUT  SPL,R30
000086 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000087 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000088 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000089 e0d3      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00008a 940c 021a 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x300
                 
                 	.CSEG
                 ;#include <mega328p.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.EQU __sm_ext_standby=0x0E
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 ;#include <delay.h>
                 ;#include <alcd.h>
                 ;#include <stdio.h>
                 ;#include <1wire.h>
                 ;
                 ;#define  SBI(PORT,BIT)       PORT|=(1<<BIT)
                 ;#define  CBI(PORT,BIT)       PORT&=~(1<<BIT)
                 ;#define  CHK_FLAG(I)         (flag & (1 << I))
                 ;#define  CHK(BYTE,I)         (BYTE & (1 << I))
                 ;#define  LIGHT_LCD           PORTB.2
                 ;#define  DHT11               1
                 ;#define  DIV                 10
                 ;#define START_ADC            SBI(ADCSRA, 6)
                 ;
                 ;#define UP_PRESS_STATE       0
                 ;#define DOWN_PRESS_STATE     1
                 ;#define RIGHT_PRESS_STATE    2
                 ;#define LEFT_PRESS_STATE     3
                 ;#define SELECT_PRESS_STATE   4
                 ;
                 ;flash unsigned char
                 ;gr[]=  { 0xC,0x12,0x12,0xC,0x00,0x00,0x00 };
                 ;
                 ;unsigned int
                 ;adc_data;
                 ;
                 ;unsigned char
                 ;but_state;
                 ;/*********************************************************
                 ; >INTERRUPT ROUT          10ms
                 ;*********************************************************/
                 ;interrupt [TIM2_OVF] void timer2_ovf_isr(void)
                 ; 0000 0022 {
                 
                 	.CSEG
                 _timer2_ovf_isr:
                 ; .FSTART _timer2_ovf_isr
00008c 93ea      	ST   -Y,R30
                 ; 0000 0023  TCNT2=0x64;
00008d e6e4      	LDI  R30,LOW(100)
00008e 93e0 00b2 	STS  178,R30
                 ; 0000 0024 
                 ; 0000 0025  //if(!PINB.2)timer_light++;
                 ; 0000 0026  //if(timer_light > 500) LIGHT_LCD = 0;
                 ; 0000 0027 }
000090 c003      	RJMP _0x2F
                 ; .FEND
                 ;/*********************************************************
                 ; >INTERRUPT ROUT          10us
                 ;*********************************************************/
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
                 ; 0000 002C {
                 _timer0_ovf_isr:
                 ; .FSTART _timer0_ovf_isr
000091 93ea      	ST   -Y,R30
                 ; 0000 002D  TCNT0=0x60;
000092 e6e0      	LDI  R30,LOW(96)
000093 bde6      	OUT  0x26,R30
                 ; 0000 002E }
                 _0x2F:
000094 91e9      	LD   R30,Y+
000095 9518      	RETI
                 ; .FEND
                 ;
                 ;/*********************************************************
                 ; >INTERRUPT ROUT          ADC
                 ;*********************************************************/
                 ;interrupt [ADC_INT] void adc_isr(void)
                 ; 0000 0034 {
                 _adc_isr:
                 ; .FSTART _adc_isr
000096 920a      	ST   -Y,R0
000097 93ea      	ST   -Y,R30
000098 93fa      	ST   -Y,R31
000099 b7ef      	IN   R30,SREG
00009a 93ea      	ST   -Y,R30
                 ; 0000 0035  adc_data = ADCW;
                +
00009b 9030 0078+LDS R3 , 0 + ( 120 )
00009d 9040 0079+LDS R4 , 0 + ( 120 ) + 1
                 	__GETWRMN 3,4,0,120
                 ; 0000 0036 
                 ; 0000 0037  if(adc_data > 100 && adc_data < 200)  SBI(but_state, UP_PRESS_STATE);
00009f e6e4      	LDI  R30,LOW(100)
0000a0 e0f0      	LDI  R31,HIGH(100)
0000a1 15e3      	CP   R30,R3
0000a2 05f4      	CPC  R31,R4
0000a3 f428      	BRSH _0x4
0000a4 ece8      	LDI  R30,LOW(200)
0000a5 e0f0      	LDI  R31,HIGH(200)
0000a6 163e      	CP   R3,R30
0000a7 064f      	CPC  R4,R31
0000a8 f008      	BRLO _0x5
                 _0x4:
0000a9 c002      	RJMP _0x3
                 _0x5:
0000aa e0e1      	LDI  R30,LOW(1)
0000ab 2a6e      	OR   R6,R30
                 ; 0000 0038  if(adc_data > 200 && adc_data < 300) SBI(but_state, DOWN_PRESS_STATE);
                 _0x3:
0000ac ece8      	LDI  R30,LOW(200)
0000ad e0f0      	LDI  R31,HIGH(200)
0000ae 15e3      	CP   R30,R3
0000af 05f4      	CPC  R31,R4
0000b0 f428      	BRSH _0x7
0000b1 e2ec      	LDI  R30,LOW(300)
0000b2 e0f1      	LDI  R31,HIGH(300)
0000b3 163e      	CP   R3,R30
0000b4 064f      	CPC  R4,R31
0000b5 f008      	BRLO _0x8
                 _0x7:
0000b6 c002      	RJMP _0x6
                 _0x8:
0000b7 e0e2      	LDI  R30,LOW(2)
0000b8 2a6e      	OR   R6,R30
                 ; 0000 0039  if(!adc_data || adc_data < 100)       SBI(but_state, RIGHT_PRESS_STATE);
                 _0x6:
0000b9 2c03      	MOV  R0,R3
0000ba 2804      	OR   R0,R4
0000bb f029      	BREQ _0xA
0000bc e6e4      	LDI  R30,LOW(100)
0000bd e0f0      	LDI  R31,HIGH(100)
0000be 163e      	CP   R3,R30
0000bf 064f      	CPC  R4,R31
0000c0 f410      	BRSH _0x9
                 _0xA:
0000c1 e0e4      	LDI  R30,LOW(4)
0000c2 2a6e      	OR   R6,R30
                 ; 0000 003A  if(adc_data > 300 && adc_data < 500) SBI(but_state, LEFT_PRESS_STATE);
                 _0x9:
0000c3 e2ec      	LDI  R30,LOW(300)
0000c4 e0f1      	LDI  R31,HIGH(300)
0000c5 15e3      	CP   R30,R3
0000c6 05f4      	CPC  R31,R4
0000c7 f428      	BRSH _0xD
0000c8 efe4      	LDI  R30,LOW(500)
0000c9 e0f1      	LDI  R31,HIGH(500)
0000ca 163e      	CP   R3,R30
0000cb 064f      	CPC  R4,R31
0000cc f008      	BRLO _0xE
                 _0xD:
0000cd c002      	RJMP _0xC
                 _0xE:
0000ce e0e8      	LDI  R30,LOW(8)
0000cf 2a6e      	OR   R6,R30
                 ; 0000 003B  if(adc_data > 500 && adc_data < 700) SBI(but_state, SELECT_PRESS_STATE);
                 _0xC:
0000d0 efe4      	LDI  R30,LOW(500)
0000d1 e0f1      	LDI  R31,HIGH(500)
0000d2 15e3      	CP   R30,R3
0000d3 05f4      	CPC  R31,R4
0000d4 f428      	BRSH _0x10
0000d5 ebec      	LDI  R30,LOW(700)
0000d6 e0f2      	LDI  R31,HIGH(700)
0000d7 163e      	CP   R3,R30
0000d8 064f      	CPC  R4,R31
0000d9 f008      	BRLO _0x11
                 _0x10:
0000da c002      	RJMP _0xF
                 _0x11:
0000db e1e0      	LDI  R30,LOW(16)
0000dc 2a6e      	OR   R6,R30
                 ; 0000 003C }
                 _0xF:
0000dd 91e9      	LD   R30,Y+
0000de bfef      	OUT  SREG,R30
0000df 91f9      	LD   R31,Y+
0000e0 91e9      	LD   R30,Y+
0000e1 9009      	LD   R0,Y+
0000e2 9518      	RETI
                 ; .FEND
                 ;
                 ;void init_dev()
                 ; 0000 003F {
                 _init_dev:
                 ; .FSTART _init_dev
                 ; 0000 0040 #pragma optsize-
                 ; 0000 0041 CLKPR=(1<<CLKPCE);
0000e3 e8e0      	LDI  R30,LOW(128)
0000e4 93e0 0061 	STS  97,R30
                 ; 0000 0042 CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
0000e6 e0e0      	LDI  R30,LOW(0)
0000e7 93e0 0061 	STS  97,R30
                 ; 0000 0043 #ifdef _OPTIMIZE_SIZE_
                 ; 0000 0044 #pragma optsize+
                 ; 0000 0045 #endif
                 ; 0000 0046 
                 ; 0000 0047 // Input/Output Ports initialization
                 ; 0000 0048 // Port B initialization
                 ; 0000 0049 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 004A DDRB=(1<<DDB7) | (1<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
0000e9 efef      	LDI  R30,LOW(255)
0000ea b9e4      	OUT  0x4,R30
                 ; 0000 004B // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0000 004C PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
0000eb e0e0      	LDI  R30,LOW(0)
0000ec b9e5      	OUT  0x5,R30
                 ; 0000 004D 
                 ; 0000 004E // Port C initialization
                 ; 0000 004F // Function: Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0050 DDRC=(0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
0000ed b9e7      	OUT  0x7,R30
                 ; 0000 0051 // State: Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0052 PORTC=(0<<PORTC6) | (1<<PORTC5) | (1<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (1<<PORTC1) | (0<<PORTC0);
0000ee e3e2      	LDI  R30,LOW(50)
0000ef b9e8      	OUT  0x8,R30
                 ; 0000 0053 
                 ; 0000 0054 // Port D initialization
                 ; 0000 0055 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 0056 DDRD=(1<<DDD7) | (1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
0000f0 efef      	LDI  R30,LOW(255)
0000f1 b9ea      	OUT  0xA,R30
                 ; 0000 0057 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0000 0058 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
0000f2 e0e0      	LDI  R30,LOW(0)
0000f3 b9eb      	OUT  0xB,R30
                 ; 0000 0059 
                 ; 0000 005A // Timer/Counter 0 initialization
                 ; 0000 005B // Clock source: System Clock
                 ; 0000 005C // Clock value: 16000,000 kHz
                 ; 0000 005D // Mode: Normal top=0xFF
                 ; 0000 005E // OC0A output: Disconnected
                 ; 0000 005F // OC0B output: Disconnected
                 ; 0000 0060 // Timer Period: 0,01 ms
                 ; 0000 0061 TCCR0A=(0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (0<<WGM00);
0000f4 bde4      	OUT  0x24,R30
                 ; 0000 0062 TCCR0B=(0<<WGM02) | (0<<CS02) | (0<<CS01) | (1<<CS00);
0000f5 e0e1      	LDI  R30,LOW(1)
0000f6 bde5      	OUT  0x25,R30
                 ; 0000 0063 TCNT0=0x60;
0000f7 e6e0      	LDI  R30,LOW(96)
0000f8 bde6      	OUT  0x26,R30
                 ; 0000 0064 OCR0A=0x00;
0000f9 e0e0      	LDI  R30,LOW(0)
0000fa bde7      	OUT  0x27,R30
                 ; 0000 0065 OCR0B=0x00;
0000fb bde8      	OUT  0x28,R30
                 ; 0000 0066 
                 ; 0000 0067 // Timer/Counter 1 initialization
                 ; 0000 0068 // Clock source: System Clock
                 ; 0000 0069 // Clock value: Timer1 Stopped
                 ; 0000 006A // Mode: Normal top=0xFFFF
                 ; 0000 006B // OC1A output: Disconnected
                 ; 0000 006C // OC1B output: Disconnected
                 ; 0000 006D // Noise Canceler: Off
                 ; 0000 006E // Input Capture on Falling Edge
                 ; 0000 006F // Timer1 Overflow Interrupt: Off
                 ; 0000 0070 // Input Capture Interrupt: Off
                 ; 0000 0071 // Compare A Match Interrupt: Off
                 ; 0000 0072 // Compare B Match Interrupt: Off
                 ; 0000 0073 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
0000fc 93e0 0080 	STS  128,R30
                 ; 0000 0074 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
0000fe 93e0 0081 	STS  129,R30
                 ; 0000 0075 TCNT1H=0x00;
000100 93e0 0085 	STS  133,R30
                 ; 0000 0076 TCNT1L=0x00;
000102 93e0 0084 	STS  132,R30
                 ; 0000 0077 ICR1H=0x00;
000104 93e0 0087 	STS  135,R30
                 ; 0000 0078 ICR1L=0x00;
000106 93e0 0086 	STS  134,R30
                 ; 0000 0079 OCR1AH=0x00;
000108 93e0 0089 	STS  137,R30
                 ; 0000 007A OCR1AL=0x00;
00010a 93e0 0088 	STS  136,R30
                 ; 0000 007B OCR1BH=0x00;
00010c 93e0 008b 	STS  139,R30
                 ; 0000 007C OCR1BL=0x00;
00010e 93e0 008a 	STS  138,R30
                 ; 0000 007D 
                 ; 0000 007E // Timer/Counter 2 initialization
                 ; 0000 007F // Clock source: System Clock
                 ; 0000 0080 // Clock value: 15,625 kHz
                 ; 0000 0081 // Mode: Normal top=0xFF
                 ; 0000 0082 // OC2A output: Disconnected
                 ; 0000 0083 // OC2B output: Disconnected
                 ; 0000 0084 // Timer Period: 9,984 ms
                 ; 0000 0085 ASSR=(0<<EXCLK) | (0<<AS2);
000110 93e0 00b6 	STS  182,R30
                 ; 0000 0086 TCCR2A=(0<<COM2A1) | (0<<COM2A0) | (0<<COM2B1) | (0<<COM2B0) | (0<<WGM21) | (0<<WGM20);
000112 93e0 00b0 	STS  176,R30
                 ; 0000 0087 TCCR2B=(0<<WGM22) | (1<<CS22) | (1<<CS21) | (1<<CS20);
000114 e0e7      	LDI  R30,LOW(7)
000115 93e0 00b1 	STS  177,R30
                 ; 0000 0088 TCNT2=0x64;
000117 e6e4      	LDI  R30,LOW(100)
000118 93e0 00b2 	STS  178,R30
                 ; 0000 0089 OCR2A=0x00;
00011a e0e0      	LDI  R30,LOW(0)
00011b 93e0 00b3 	STS  179,R30
                 ; 0000 008A OCR2B=0x00;
00011d 93e0 00b4 	STS  180,R30
                 ; 0000 008B 
                 ; 0000 008C // Timer/Counter 0 Interrupt(s) initialization
                 ; 0000 008D TIMSK0=(0<<OCIE0B) | (0<<OCIE0A) | (1<<TOIE0);
00011f e0e1      	LDI  R30,LOW(1)
000120 93e0 006e 	STS  110,R30
                 ; 0000 008E 
                 ; 0000 008F // Timer/Counter 1 Interrupt(s) initialization
                 ; 0000 0090 TIMSK1=(0<<ICIE1) | (0<<OCIE1B) | (0<<OCIE1A) | (0<<TOIE1);
000122 e0e0      	LDI  R30,LOW(0)
000123 93e0 006f 	STS  111,R30
                 ; 0000 0091 
                 ; 0000 0092 // Timer/Counter 2 Interrupt(s) initialization
                 ; 0000 0093 TIMSK2=(0<<OCIE2B) | (0<<OCIE2A) | (1<<TOIE2);
000125 e0e1      	LDI  R30,LOW(1)
000126 93e0 0070 	STS  112,R30
                 ; 0000 0094 
                 ; 0000 0095 // External Interrupt(s) initialization
                 ; 0000 0096 // INT0: Off
                 ; 0000 0097 // INT1: Off
                 ; 0000 0098 // Interrupt on any change on pins PCINT0-7: Off
                 ; 0000 0099 // Interrupt on any change on pins PCINT8-14: Off
                 ; 0000 009A // Interrupt on any change on pins PCINT16-23: Off
                 ; 0000 009B EICRA=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
000128 e0e0      	LDI  R30,LOW(0)
000129 93e0 0069 	STS  105,R30
                 ; 0000 009C EIMSK=(0<<INT1) | (0<<INT0);
00012b bbed      	OUT  0x1D,R30
                 ; 0000 009D PCICR=(0<<PCIE2) | (0<<PCIE1) | (0<<PCIE0);
00012c 93e0 0068 	STS  104,R30
                 ; 0000 009E 
                 ; 0000 009F // USART initialization
                 ; 0000 00A0 // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 00A1 // USART Receiver: Off
                 ; 0000 00A2 // USART Transmitter: On
                 ; 0000 00A3 // USART0 Mode: Asynchronous
                 ; 0000 00A4 // USART Baud Rate: 9600
                 ; 0000 00A5 UCSR0A=(0<<RXC0) | (0<<TXC0) | (0<<UDRE0) | (0<<FE0) | (0<<DOR0) | (0<<UPE0) | (0<<U2X0) | (0<<MPCM0);
00012e 93e0 00c0 	STS  192,R30
                 ; 0000 00A6 UCSR0B=(0<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (0<<RXEN0) | (1<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
000130 e0e8      	LDI  R30,LOW(8)
000131 93e0 00c1 	STS  193,R30
                 ; 0000 00A7 UCSR0C=(0<<UMSEL01) | (0<<UMSEL00) | (0<<UPM01) | (0<<UPM00) | (0<<USBS0) | (1<<UCSZ01) | (1<<UCSZ00) | (0<<UCPOL0);
000133 e0e6      	LDI  R30,LOW(6)
000134 93e0 00c2 	STS  194,R30
                 ; 0000 00A8 UBRR0H=0x00;
000136 e0e0      	LDI  R30,LOW(0)
000137 93e0 00c5 	STS  197,R30
                 ; 0000 00A9 UBRR0L=0x67;
000139 e6e7      	LDI  R30,LOW(103)
00013a 93e0 00c4 	STS  196,R30
                 ; 0000 00AA 
                 ; 0000 00AB // Analog Comparator initialization
                 ; 0000 00AC // Analog Comparator: Off
                 ; 0000 00AD // The Analog Comparator's positive input is
                 ; 0000 00AE // connected to the AIN0 pin
                 ; 0000 00AF // The Analog Comparator's negative input is
                 ; 0000 00B0 // connected to the AIN1 pin
                 ; 0000 00B1 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
00013c e8e0      	LDI  R30,LOW(128)
00013d bfe0      	OUT  0x30,R30
                 ; 0000 00B2 // Digital input buffer on AIN0: On
                 ; 0000 00B3 // Digital input buffer on AIN1: On
                 ; 0000 00B4 DIDR1=(0<<AIN0D) | (0<<AIN1D);
00013e e0e0      	LDI  R30,LOW(0)
00013f 93e0 007f 	STS  127,R30
                 ; 0000 00B5 
                 ; 0000 00B6 // ADC initialization
                 ; 0000 00B7 // ADC Clock frequency: 125,000 kHz
                 ; 0000 00B8 // ADC Voltage Reference: AVCC pin
                 ; 0000 00B9 // ADC Auto Trigger Source: ADC Stopped
                 ; 0000 00BA // Digital input buffers on ADC0: Off, ADC1: On, ADC2: On, ADC3: On
                 ; 0000 00BB // ADC4: On, ADC5: On
                 ; 0000 00BC #define ADC_VREF_TYPE ((0<<REFS1) | (1<<REFS0) | (0<<ADLAR))
                 ; 0000 00BD DIDR0=(0<<ADC5D) | (0<<ADC4D) | (0<<ADC3D) | (0<<ADC2D) | (0<<ADC1D) | (1<<ADC0D);
000141 e0e1      	LDI  R30,LOW(1)
000142 93e0 007e 	STS  126,R30
                 ; 0000 00BE ADMUX=ADC_VREF_TYPE;
000144 e4e0      	LDI  R30,LOW(64)
000145 93e0 007c 	STS  124,R30
                 ; 0000 00BF ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (1<<ADIE) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
000147 e8ef      	LDI  R30,LOW(143)
000148 93e0 007a 	STS  122,R30
                 ; 0000 00C0 ADCSRB=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
00014a e0e0      	LDI  R30,LOW(0)
00014b 93e0 007b 	STS  123,R30
                 ; 0000 00C1 
                 ; 0000 00C2 // SPI initialization
                 ; 0000 00C3 // SPI Type: Master
                 ; 0000 00C4 // SPI Clock Rate: 2*4000,000 kHz
                 ; 0000 00C5 // SPI Clock Phase: Cycle Start
                 ; 0000 00C6 // SPI Clock Polarity: Low
                 ; 0000 00C7 // SPI Data Order: MSB First
                 ; 0000 00C8 SPCR=(0<<SPIE) | (1<<SPE) | (0<<DORD) | (1<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
00014d e5e0      	LDI  R30,LOW(80)
00014e bdec      	OUT  0x2C,R30
                 ; 0000 00C9 SPSR=(1<<SPI2X);
00014f e0e1      	LDI  R30,LOW(1)
000150 bded      	OUT  0x2D,R30
                 ; 0000 00CA 
                 ; 0000 00CB // TWI initialization
                 ; 0000 00CC // TWI disabled
                 ; 0000 00CD TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
000151 e0e0      	LDI  R30,LOW(0)
000152 93e0 00bc 	STS  188,R30
                 ; 0000 00CE 
                 ; 0000 00CF // Bit-Banged I2C Bus initialization
                 ; 0000 00D0 // I2C Port: PORTC
                 ; 0000 00D1 // I2C SDA bit: 4
                 ; 0000 00D2 // I2C SCL bit: 5
                 ; 0000 00D3 // Bit Rate: 100 kHz
                 ; 0000 00D4 // Note: I2C settings are specified in the
                 ; 0000 00D5 // Project|Configure|C Compiler|Libraries|I2C menu.
                 ; 0000 00D6 
                 ; 0000 00D7 // Alphanumeric LCD initialization
                 ; 0000 00D8 // Connections are specified in the
                 ; 0000 00D9 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 00DA // RS - PORTB Bit 0
                 ; 0000 00DB // RD - PORTB Bit 7
                 ; 0000 00DC // EN - PORTB Bit 1
                 ; 0000 00DD // D4 - PORTD Bit 4
                 ; 0000 00DE // D5 - PORTD Bit 5
                 ; 0000 00DF // D6 - PORTD Bit 6
                 ; 0000 00E0 // D7 - PORTD Bit 7
                 ; 0000 00E1 // Characters/line: 16
                 ; 0000 00E2 lcd_init(16);
000154 e1a0      	LDI  R26,LOW(16)
000155 940e 0298 	CALL _lcd_init
                 ; 0000 00E3 
                 ; 0000 00E4 // Global enable interrupts
                 ; 0000 00E5 #asm("sei")
000157 9478      	sei
                 ; 0000 00E6 }
000158 9508      	RET
                 ; .FEND
                 ;
                 ;void define_char(char flash *pc,char char_code){
                 ; 0000 00E8 void define_char(char flash *pc,char char_code){
                 _define_char:
                 ; .FSTART _define_char
                 ; 0000 00E9 
                 ; 0000 00EA char i,a;
                 ; 0000 00EB  #asm("cli")
000159 93aa      	ST   -Y,R26
00015a 931a      	ST   -Y,R17
00015b 930a      	ST   -Y,R16
                 ;	*pc -> Y+3
                 ;	char_code -> Y+2
                 ;	i -> R17
                 ;	a -> R16
00015c 94f8      	cli
                 ; 0000 00EC a=(char_code<<3)|0x40;
00015d 81ea      	LDD  R30,Y+2
00015e 0fee      	LSL  R30
00015f 0fee      	LSL  R30
000160 0fee      	LSL  R30
000161 64e0      	ORI  R30,0x40
000162 2f0e      	MOV  R16,R30
                 ; 0000 00ED 
                 ; 0000 00EE   for(i=0;i<8;i++){
000163 e010      	LDI  R17,LOW(0)
                 _0x13:
000164 3018      	CPI  R17,8
000165 f468      	BRSH _0x14
                 ; 0000 00EF 
                 ; 0000 00F0      lcd_write_byte(a++, *pc++);
000166 930a      	ST   -Y,R16
000167 9503      	INC  R16
000168 81ec      	LDD  R30,Y+4
000169 81fd      	LDD  R31,Y+4+1
00016a 9631      	ADIW R30,1
00016b 83ec      	STD  Y+4,R30
00016c 83fd      	STD  Y+4+1,R31
00016d 9731      	SBIW R30,1
00016e 91a4      	LPM  R26,Z
00016f 940e 0251 	CALL _lcd_write_byte
                 ; 0000 00F1     }
000171 5f1f      	SUBI R17,-1
000172 cff1      	RJMP _0x13
                 _0x14:
                 ; 0000 00F2    #asm("sei")
000173 9478      	sei
                 ; 0000 00F3 }
000174 940c 0302 	JMP  _0x2080002
                 ; .FEND
                 ;
                 ;signed char DS18B20_read()
                 ; 0000 00F6 {
                 _DS18B20_read:
                 ; .FSTART _DS18B20_read
                 ; 0000 00F7  unsigned char a, b, i, j, crc = 0, data[9];
                 ; 0000 00F8  signed char tmp;
                 ; 0000 00F9 
                 ; 0000 00FA //Старт конвертации
                 ; 0000 00FB     #asm("cli")
000176 9729      	SBIW R28,9
000177 940e 0542 	CALL __SAVELOCR6
                 ;	a -> R17
                 ;	b -> R16
                 ;	i -> R19
                 ;	j -> R18
                 ;	crc -> R21
                 ;	data -> Y+6
                 ;	tmp -> R20
000179 e050      	LDI  R21,0
00017a 94f8      	cli
                 ; 0000 00FC     a = w1_init();
00017b 940e 04cb 	CALL _w1_init
00017d 2f1e      	MOV  R17,R30
                 ; 0000 00FD     w1_write(0xCC);   // skip rom
00017e ecac      	LDI  R26,LOW(204)
00017f 940e 0514 	CALL _w1_write
                 ; 0000 00FE     w1_write(0x44);   // start conv
000181 e4a4      	LDI  R26,LOW(68)
000182 940e 0514 	CALL _w1_write
                 ; 0000 00FF 
                 ; 0000 0100     delay_ms(1000);
000184 eea8      	LDI  R26,LOW(1000)
000185 e0b3      	LDI  R27,HIGH(1000)
000186 940e 04c1 	CALL _delay_ms
                 ; 0000 0101 
                 ; 0000 0102 //Чтение датчика
                 ; 0000 0103     w1_init();
000188 940e 04cb 	CALL _w1_init
                 ; 0000 0104     w1_write(0xCC);  // skip rom
00018a ecac      	LDI  R26,LOW(204)
00018b 940e 0514 	CALL _w1_write
                 ; 0000 0105     w1_write(0xBE);  // read scratch pad
00018d ebae      	LDI  R26,LOW(190)
00018e 940e 0514 	CALL _w1_write
                 ; 0000 0106 
                 ; 0000 0107     for(i = 0; i < 9; i++)
000190 e030      	LDI  R19,LOW(0)
                 _0x16:
000191 3039      	CPI  R19,9
000192 f478      	BRSH _0x17
                 ; 0000 0108       data[i] = w1_read();
000193 2fe3      	MOV  R30,R19
000194 e0f0      	LDI  R31,0
000195 01de      	MOVW R26,R28
000196 9616      	ADIW R26,6
000197 0fea      	ADD  R30,R26
000198 1ffb      	ADC  R31,R27
000199 93ff      	PUSH R31
00019a 93ef      	PUSH R30
00019b 940e 050f 	CALL _w1_read
00019d 91af      	POP  R26
00019e 91bf      	POP  R27
00019f 93ec      	ST   X,R30
0001a0 5f3f      	SUBI R19,-1
0001a1 cfef      	RJMP _0x16
                 _0x17:
                 ; 0000 0109 w1_init();
0001a2 940e 04cb 	CALL _w1_init
                 ; 0000 010A     #asm("sei")
0001a4 9478      	sei
                 ; 0000 010B 
                 ; 0000 010C //Контроль четности
                 ; 0000 010D     for(i = 0; i < 9; i++)
0001a5 e030      	LDI  R19,LOW(0)
                 _0x19:
0001a6 3039      	CPI  R19,9
0001a7 f4f0      	BRSH _0x1A
                 ; 0000 010E     {
                 ; 0000 010F         a = data[i];
0001a8 2fe3      	MOV  R30,R19
0001a9 e0f0      	LDI  R31,0
0001aa 01de      	MOVW R26,R28
0001ab 9616      	ADIW R26,6
0001ac 0fae      	ADD  R26,R30
0001ad 1fbf      	ADC  R27,R31
0001ae 911c      	LD   R17,X
                 ; 0000 0110 
                 ; 0000 0111         for(j = 0; j < 8; j++)
0001af e020      	LDI  R18,LOW(0)
                 _0x1C:
0001b0 3028      	CPI  R18,8
0001b1 f490      	BRSH _0x1D
                 ; 0000 0112         {
                 ; 0000 0113             b = a;
0001b2 2f01      	MOV  R16,R17
                 ; 0000 0114             a ^= crc;
0001b3 2715      	EOR  R17,R21
                 ; 0000 0115             if(a & 1) crc = ((crc ^ 0x18) >> 1) | 0x80;
0001b4 ff10      	SBRS R17,0
0001b5 c008      	RJMP _0x1E
0001b6 e1e8      	LDI  R30,LOW(24)
0001b7 27e5      	EOR  R30,R21
0001b8 e0f0      	LDI  R31,0
0001b9 95f5      	ASR  R31
0001ba 95e7      	ROR  R30
0001bb 68e0      	ORI  R30,0x80
0001bc 2f5e      	MOV  R21,R30
                 ; 0000 0116             else crc >>= 1;
0001bd c001      	RJMP _0x1F
                 _0x1E:
0001be 9556      	LSR  R21
                 ; 0000 0117             a = b >> 1;
                 _0x1F:
0001bf 2fe0      	MOV  R30,R16
0001c0 95e6      	LSR  R30
0001c1 2f1e      	MOV  R17,R30
                 ; 0000 0118         }
0001c2 5f2f      	SUBI R18,-1
0001c3 cfec      	RJMP _0x1C
                 _0x1D:
                 ; 0000 0119     }
0001c4 5f3f      	SUBI R19,-1
0001c5 cfe0      	RJMP _0x19
                 _0x1A:
                 ; 0000 011A 
                 ; 0000 011B //Вычисление температуры
                 ; 0000 011C     if(!crc)
0001c6 3050      	CPI  R21,0
0001c7 f529      	BRNE _0x20
                 ; 0000 011D     {
                 ; 0000 011E         if( (data[1] >> 4) & 0x0F )
0001c8 81ef      	LDD  R30,Y+7
0001c9 e0f0      	LDI  R31,0
0001ca 940e 0526 	CALL __ASRW4
0001cc 70ef      	ANDI R30,LOW(0xF)
0001cd f0a1      	BREQ _0x21
                 ; 0000 011F         {
                 ; 0000 0120             tmp = ~(data[0] >> 4);
0001ce 81ee      	LDD  R30,Y+6
0001cf 95e2      	SWAP R30
0001d0 70ef      	ANDI R30,0xF
0001d1 95e0      	COM  R30
0001d2 2f4e      	MOV  R20,R30
                 ; 0000 0121             tmp += ~(data[1] << 4);
0001d3 81ef      	LDD  R30,Y+7
0001d4 95e2      	SWAP R30
0001d5 7fe0      	ANDI R30,0xF0
0001d6 95e0      	COM  R30
0001d7 0f4e      	ADD  R20,R30
                 ; 0000 0122             tmp += 2;
0001d8 5f4e      	SUBI R20,-LOW(2)
                 ; 0000 0123 
                 ; 0000 0124             if((data[0] >> 3) & 0x01 ) tmp++;  // округление до целых
0001d9 81ee      	LDD  R30,Y+6
0001da e0f0      	LDI  R31,0
0001db 940e 0528 	CALL __ASRW3
0001dd 70e1      	ANDI R30,LOW(0x1)
0001de f009      	BREQ _0x22
0001df 5f4f      	SUBI R20,-1
                 ; 0000 0125 
                 ; 0000 0126             tmp = -tmp;
                 _0x22:
0001e0 9541      	NEG  R20
                 ; 0000 0127         }
                 ; 0000 0128         else
0001e1 c008      	RJMP _0x23
                 _0x21:
                 ; 0000 0129         {
                 ; 0000 012A             tmp = data[0] >> 4;
0001e2 81ee      	LDD  R30,Y+6
0001e3 95e2      	SWAP R30
0001e4 70ef      	ANDI R30,0xF
0001e5 2f4e      	MOV  R20,R30
                 ; 0000 012B             tmp += data[1] << 4;
0001e6 81ef      	LDD  R30,Y+7
0001e7 95e2      	SWAP R30
0001e8 7fe0      	ANDI R30,0xF0
0001e9 0f4e      	ADD  R20,R30
                 ; 0000 012C         }
                 _0x23:
                 ; 0000 012D 
                 ; 0000 012E         tmp--;
0001ea 5041      	SUBI R20,1
                 ; 0000 012F 
                 ; 0000 0130         return tmp;
0001eb 2fe4      	MOV  R30,R20
0001ec c001      	RJMP _0x2080005
                 ; 0000 0131     }
                 ; 0000 0132     else
                 _0x20:
                 ; 0000 0133     {
                 ; 0000 0134         return 255;
0001ed efef      	LDI  R30,LOW(255)
                 ; 0000 0135     }
                 ; 0000 0136 }
                 _0x2080005:
0001ee 940e 0549 	CALL __LOADLOCR6
0001f0 962f      	ADIW R28,15
0001f1 9508      	RET
                 ; .FEND
                 ;
                 ;void print_data(signed char var)
                 ; 0000 0139 {
                 _print_data:
                 ; .FSTART _print_data
                 ; 0000 013A   unsigned char array[16];
                 ; 0000 013B 
                 ; 0000 013C   lcd_clear();
0001f2 93aa      	ST   -Y,R26
0001f3 9760      	SBIW R28,16
                 ;	var -> Y+16
                 ;	array -> Y+0
0001f4 d071      	RCALL _lcd_clear
                 ; 0000 013D 
                 ; 0000 013E   if(var != -1)
0001f5 89a8      	LDD  R26,Y+16
0001f6 3faf      	CPI  R26,LOW(0xFF)
0001f7 f0c9      	BREQ _0x25
                 ; 0000 013F   {
                 ; 0000 0140     sprintf(array, "Temp = %3d", var);
0001f8 01fe      	MOVW R30,R28
0001f9 93fa      	ST   -Y,R31
0001fa 93ea      	ST   -Y,R30
                +
0001fb e8e2     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
0001fc e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
0001fd 93fa      	ST   -Y,R31
0001fe 93ea      	ST   -Y,R30
0001ff 89ec      	LDD  R30,Y+20
000200 940e 052f 	CALL __CBD1
000202 940e 053d 	CALL __PUTPARD1
000204 e084      	LDI  R24,4
000205 940e 043a 	CALL _sprintf
000207 9628      	ADIW R28,8
                 ; 0000 0141     lcd_gotoxy(3, 0);
000208 e0e3      	LDI  R30,LOW(3)
000209 93ea      	ST   -Y,R30
00020a e0a0      	LDI  R26,LOW(0)
00020b d04d      	RCALL _lcd_gotoxy
                 ; 0000 0142     lcd_puts(array);
00020c 01de      	MOVW R26,R28
00020d d079      	RCALL _lcd_puts
                 ; 0000 0143     lcd_putchar(1);
00020e e0a1      	LDI  R26,LOW(1)
00020f d062      	RCALL _lcd_putchar
                 ; 0000 0144   }
                 ; 0000 0145   else
000210 c007      	RJMP _0x26
                 _0x25:
                 ; 0000 0146   {
                 ; 0000 0147     lcd_gotoxy(3, 0);
000211 e0e3      	LDI  R30,LOW(3)
000212 93ea      	ST   -Y,R30
000213 e0a0      	LDI  R26,LOW(0)
000214 d044      	RCALL _lcd_gotoxy
                 ; 0000 0148     lcd_puts("Error read");
                +
000215 e0a0     +LDI R26 , LOW ( _0x27 + ( 0 ) )
000216 e0b3     +LDI R27 , HIGH ( _0x27 + ( 0 ) )
                 	__POINTW2MN _0x27,0
000217 d06f      	RCALL _lcd_puts
                 ; 0000 0149   }
                 _0x26:
                 ; 0000 014A }
000218 9661      	ADIW R28,17
000219 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0x27:
000300           	.BYTE 0xB
                 ;
                 ;void main(void)
                 ; 0000 014D {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 014E  init_dev();
00021a dec8      	RCALL _init_dev
                 ; 0000 014F  LIGHT_LCD = 1;
00021b 9a2a      	SBI  0x5,2
                 ; 0000 0150  w1_init();
00021c 940e 04cb 	CALL _w1_init
                 ; 0000 0151  define_char(gr, 1);
00021e e6e8      	LDI  R30,LOW(_gr*2)
00021f e0f0      	LDI  R31,HIGH(_gr*2)
000220 93fa      	ST   -Y,R31
000221 93ea      	ST   -Y,R30
000222 e0a1      	LDI  R26,LOW(1)
000223 df35      	RCALL _define_char
                 ; 0000 0152  lcd_puts("Started...");
                +
000224 e0ab     +LDI R26 , LOW ( _0x2A + ( 0 ) )
000225 e0b3     +LDI R27 , HIGH ( _0x2A + ( 0 ) )
                 	__POINTW2MN _0x2A,0
000226 d060      	RCALL _lcd_puts
                 ; 0000 0153 
                 ; 0000 0154 while (1)
                 _0x2B:
                 ; 0000 0155       {
                 ; 0000 0156         print_data(DS18B20_read());
000227 df4e      	RCALL _DS18B20_read
000228 2fae      	MOV  R26,R30
000229 dfc8      	RCALL _print_data
                 ; 0000 0157         delay_ms(500);
00022a efa4      	LDI  R26,LOW(500)
00022b e0b1      	LDI  R27,HIGH(500)
00022c 940e 04c1 	CALL _delay_ms
                 ; 0000 0158       }
00022e cff8      	RJMP _0x2B
                 ; 0000 0159 }
                 _0x2E:
00022f cfff      	RJMP _0x2E
                 ; .FEND
                 
                 	.DSEG
                 _0x2A:
00030b           	.BYTE 0xB
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
000230 93aa      	ST   -Y,R26
000231 b1eb      	IN   R30,0xB
000232 70ef      	ANDI R30,LOW(0xF)
000233 2fae      	MOV  R26,R30
000234 81e8      	LD   R30,Y
000235 7fe0      	ANDI R30,LOW(0xF0)
000236 2bea      	OR   R30,R26
000237 b9eb      	OUT  0xB,R30
                +
000238 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
000239 958a     +DEC R24
00023a f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
00023b 9a29      	SBI  0x5,1
                +
00023c e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
00023d 958a     +DEC R24
00023e f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
00023f 9829      	CBI  0x5,1
                +
000240 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
000241 958a     +DEC R24
000242 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
000243 c080      	RJMP _0x2080003
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000244 93aa      	ST   -Y,R26
000245 81a8      	LD   R26,Y
000246 dfe9      	RCALL __lcd_write_nibble_G100
000247 81e8          ld    r30,y
000248 95e2          swap  r30
000249 83e8          st    y,r30
00024a 81a8      	LD   R26,Y
00024b dfe4      	RCALL __lcd_write_nibble_G100
                +
00024c ec88     +LDI R24 , LOW ( 200 )
00024d e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00024e 9701     +SBIW R24 , 1
00024f f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000250 c073      	RJMP _0x2080003
                 ; .FEND
                 _lcd_write_byte:
                 ; .FSTART _lcd_write_byte
000251 93aa      	ST   -Y,R26
000252 81a9      	LDD  R26,Y+1
000253 dff0      	RCALL __lcd_write_data
000254 9a28      	SBI  0x5,0
000255 81a8      	LD   R26,Y
000256 dfed      	RCALL __lcd_write_data
000257 9828      	CBI  0x5,0
000258 c00b      	RJMP _0x2080004
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000259 93aa      	ST   -Y,R26
00025a 81e8      	LD   R30,Y
00025b e0f0      	LDI  R31,0
00025c 5eea      	SUBI R30,LOW(-__base_y_G100)
00025d 4ffc      	SBCI R31,HIGH(-__base_y_G100)
00025e 81e0      	LD   R30,Z
00025f 81a9      	LDD  R26,Y+1
000260 0fae      	ADD  R26,R30
000261 dfe2      	RCALL __lcd_write_data
000262 8059      	LDD  R5,Y+1
000263 8088      	LDD  R8,Y+0
                 _0x2080004:
000264 9622      	ADIW R28,2
000265 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000266 e0a2      	LDI  R26,LOW(2)
000267 940e 0487 	CALL SUBOPT_0x0
000269 e0ac      	LDI  R26,LOW(12)
00026a dfd9      	RCALL __lcd_write_data
00026b e0a1      	LDI  R26,LOW(1)
00026c 940e 0487 	CALL SUBOPT_0x0
00026e e0e0      	LDI  R30,LOW(0)
00026f 2e8e      	MOV  R8,R30
000270 2e5e      	MOV  R5,R30
000271 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000272 93aa      	ST   -Y,R26
000273 81a8      	LD   R26,Y
000274 30aa      	CPI  R26,LOW(0xA)
000275 f011      	BREQ _0x2000005
000276 1457      	CP   R5,R7
000277 f048      	BRLO _0x2000004
                 _0x2000005:
000278 e0e0      	LDI  R30,LOW(0)
000279 93ea      	ST   -Y,R30
00027a 9483      	INC  R8
00027b 2da8      	MOV  R26,R8
00027c dfdc      	RCALL _lcd_gotoxy
00027d 81a8      	LD   R26,Y
00027e 30aa      	CPI  R26,LOW(0xA)
00027f f409      	BRNE _0x2000007
000280 c043      	RJMP _0x2080003
                 _0x2000007:
                 _0x2000004:
000281 9453      	INC  R5
000282 9a28      	SBI  0x5,0
000283 81a8      	LD   R26,Y
000284 dfbf      	RCALL __lcd_write_data
000285 9828      	CBI  0x5,0
000286 c03d      	RJMP _0x2080003
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000287 93ba      	ST   -Y,R27
000288 93aa      	ST   -Y,R26
000289 931a      	ST   -Y,R17
                 _0x2000008:
00028a 81a9      	LDD  R26,Y+1
00028b 81ba      	LDD  R27,Y+1+1
00028c 91ed      	LD   R30,X+
00028d 83a9      	STD  Y+1,R26
00028e 83ba      	STD  Y+1+1,R27
00028f 2f1e      	MOV  R17,R30
000290 30e0      	CPI  R30,0
000291 f019      	BREQ _0x200000A
000292 2fa1      	MOV  R26,R17
000293 dfde      	RCALL _lcd_putchar
000294 cff5      	RJMP _0x2000008
                 _0x200000A:
000295 8118      	LDD  R17,Y+0
000296 9623      	ADIW R28,3
000297 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000298 93aa      	ST   -Y,R26
000299 b1ea      	IN   R30,0xA
00029a 6fe0      	ORI  R30,LOW(0xF0)
00029b b9ea      	OUT  0xA,R30
00029c 9a21      	SBI  0x4,1
00029d 9a20      	SBI  0x4,0
00029e 9a27      	SBI  0x4,7
00029f 9829      	CBI  0x5,1
0002a0 9828      	CBI  0x5,0
0002a1 982f      	CBI  0x5,7
0002a2 8078      	LDD  R7,Y+0
0002a3 81e8      	LD   R30,Y
0002a4 58e0      	SUBI R30,-LOW(128)
                +
0002a5 93e0 0318+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
0002a7 81e8      	LD   R30,Y
0002a8 54e0      	SUBI R30,-LOW(192)
                +
0002a9 93e0 0319+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
0002ab e1a4      	LDI  R26,LOW(20)
0002ac e0b0      	LDI  R27,0
0002ad 940e 04c1 	CALL _delay_ms
0002af 940e 048d 	CALL SUBOPT_0x1
0002b1 940e 048d 	CALL SUBOPT_0x1
0002b3 940e 048d 	CALL SUBOPT_0x1
0002b5 e2a0      	LDI  R26,LOW(32)
0002b6 df79      	RCALL __lcd_write_nibble_G100
                +
0002b7 e980     +LDI R24 , LOW ( 400 )
0002b8 e091     +LDI R25 , HIGH ( 400 )
                +__DELAY_USW_LOOP :
0002b9 9701     +SBIW R24 , 1
0002ba f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 400
0002bb e2a8      	LDI  R26,LOW(40)
0002bc df87      	RCALL __lcd_write_data
0002bd e0a4      	LDI  R26,LOW(4)
0002be df85      	RCALL __lcd_write_data
0002bf e8a5      	LDI  R26,LOW(133)
0002c0 df83      	RCALL __lcd_write_data
0002c1 e0a6      	LDI  R26,LOW(6)
0002c2 df81      	RCALL __lcd_write_data
0002c3 dfa2      	RCALL _lcd_clear
                 _0x2080003:
0002c4 9621      	ADIW R28,1
0002c5 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G101:
                 ; .FSTART _put_buff_G101
0002c6 93ba      	ST   -Y,R27
0002c7 93aa      	ST   -Y,R26
0002c8 931a      	ST   -Y,R17
0002c9 930a      	ST   -Y,R16
0002ca 81aa      	LDD  R26,Y+2
0002cb 81bb      	LDD  R27,Y+2+1
0002cc 9612      	ADIW R26,2
0002cd 940e 0535 	CALL __GETW1P
0002cf 9730      	SBIW R30,0
0002d0 f159      	BREQ _0x2020016
0002d1 81aa      	LDD  R26,Y+2
0002d2 81bb      	LDD  R27,Y+2+1
0002d3 9614      	ADIW R26,4
0002d4 940e 0535 	CALL __GETW1P
0002d6 018f      	MOVW R16,R30
0002d7 9730      	SBIW R30,0
0002d8 f061      	BREQ _0x2020018
                +
0002d9 3002     +CPI R16 , LOW ( 2 )
0002da e0e0     +LDI R30 , HIGH ( 2 )
0002db 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
0002dc f098      	BRLO _0x2020019
0002dd 01f8      	MOVW R30,R16
0002de 9731      	SBIW R30,1
0002df 018f      	MOVW R16,R30
                +
0002e0 81aa     +LDD R26 , Y + 2
0002e1 81bb     +LDD R27 , Y + 2 + 1
0002e2 9614     +ADIW R26 , 4
0002e3 93ed     +ST X + , R30
0002e4 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2020018:
0002e5 81aa      	LDD  R26,Y+2
0002e6 81bb      	LDD  R27,Y+2+1
0002e7 9612      	ADIW R26,2
0002e8 91ed      	LD   R30,X+
0002e9 91fd      	LD   R31,X+
0002ea 9631      	ADIW R30,1
0002eb 93fe      	ST   -X,R31
0002ec 93ee      	ST   -X,R30
0002ed 9731      	SBIW R30,1
0002ee 81ac      	LDD  R26,Y+4
0002ef 83a0      	STD  Z+0,R26
                 _0x2020019:
0002f0 81aa      	LDD  R26,Y+2
0002f1 81bb      	LDD  R27,Y+2+1
0002f2 940e 0535 	CALL __GETW1P
0002f4 23ff      	TST  R31
0002f5 f02a      	BRMI _0x202001A
0002f6 91ed      	LD   R30,X+
0002f7 91fd      	LD   R31,X+
0002f8 9631      	ADIW R30,1
0002f9 93fe      	ST   -X,R31
0002fa 93ee      	ST   -X,R30
                 _0x202001A:
0002fb c006      	RJMP _0x202001B
                 _0x2020016:
0002fc 81aa      	LDD  R26,Y+2
0002fd 81bb      	LDD  R27,Y+2+1
0002fe efef      	LDI  R30,LOW(65535)
0002ff efff      	LDI  R31,HIGH(65535)
000300 93ed      	ST   X+,R30
000301 93fc      	ST   X,R31
                 _0x202001B:
                 _0x2080002:
000302 8119      	LDD  R17,Y+1
000303 8108      	LDD  R16,Y+0
000304 9625      	ADIW R28,5
000305 9508      	RET
                 ; .FEND
                 __print_G101:
                 ; .FSTART __print_G101
000306 93ba      	ST   -Y,R27
000307 93aa      	ST   -Y,R26
000308 9726      	SBIW R28,6
000309 940e 0542 	CALL __SAVELOCR6
00030b e010      	LDI  R17,0
00030c 85ac      	LDD  R26,Y+12
00030d 85bd      	LDD  R27,Y+12+1
00030e e0e0      	LDI  R30,LOW(0)
00030f e0f0      	LDI  R31,HIGH(0)
000310 93ed      	ST   X+,R30
000311 93fc      	ST   X,R31
                 _0x202001C:
000312 89ea      	LDD  R30,Y+18
000313 89fb      	LDD  R31,Y+18+1
000314 9631      	ADIW R30,1
000315 8bea      	STD  Y+18,R30
000316 8bfb      	STD  Y+18+1,R31
000317 9731      	SBIW R30,1
000318 91e4      	LPM  R30,Z
000319 2f2e      	MOV  R18,R30
00031a 30e0      	CPI  R30,0
00031b f409      	BRNE PC+2
00031c c115      	RJMP _0x202001E
00031d 2fe1      	MOV  R30,R17
00031e 30e0      	CPI  R30,0
00031f f439      	BRNE _0x2020022
000320 3225      	CPI  R18,37
000321 f411      	BRNE _0x2020023
000322 e011      	LDI  R17,LOW(1)
000323 c002      	RJMP _0x2020024
                 _0x2020023:
000324 940e 0495 	CALL SUBOPT_0x2
                 _0x2020024:
000326 c10a      	RJMP _0x2020021
                 _0x2020022:
000327 30e1      	CPI  R30,LOW(0x1)
000328 f4a9      	BRNE _0x2020025
000329 3225      	CPI  R18,37
00032a f419      	BRNE _0x2020026
00032b 940e 0495 	CALL SUBOPT_0x2
00032d c102      	RJMP _0x20200D2
                 _0x2020026:
00032e e012      	LDI  R17,LOW(2)
00032f e040      	LDI  R20,LOW(0)
000330 e000      	LDI  R16,LOW(0)
000331 322d      	CPI  R18,45
000332 f411      	BRNE _0x2020027
000333 e001      	LDI  R16,LOW(1)
000334 c0fc      	RJMP _0x2020021
                 _0x2020027:
000335 322b      	CPI  R18,43
000336 f411      	BRNE _0x2020028
000337 e24b      	LDI  R20,LOW(43)
000338 c0f8      	RJMP _0x2020021
                 _0x2020028:
000339 3220      	CPI  R18,32
00033a f411      	BRNE _0x2020029
00033b e240      	LDI  R20,LOW(32)
00033c c0f4      	RJMP _0x2020021
                 _0x2020029:
00033d c002      	RJMP _0x202002A
                 _0x2020025:
00033e 30e2      	CPI  R30,LOW(0x2)
00033f f439      	BRNE _0x202002B
                 _0x202002A:
000340 e050      	LDI  R21,LOW(0)
000341 e013      	LDI  R17,LOW(3)
000342 3320      	CPI  R18,48
000343 f411      	BRNE _0x202002C
000344 6800      	ORI  R16,LOW(128)
000345 c0eb      	RJMP _0x2020021
                 _0x202002C:
000346 c003      	RJMP _0x202002D
                 _0x202002B:
000347 30e3      	CPI  R30,LOW(0x3)
000348 f009      	BREQ PC+2
000349 c0e7      	RJMP _0x2020021
                 _0x202002D:
00034a 3320      	CPI  R18,48
00034b f010      	BRLO _0x2020030
00034c 332a      	CPI  R18,58
00034d f008      	BRLO _0x2020031
                 _0x2020030:
00034e c007      	RJMP _0x202002F
                 _0x2020031:
00034f e0aa      	LDI  R26,LOW(10)
000350 9f5a      	MUL  R21,R26
000351 2d50      	MOV  R21,R0
000352 2fe2      	MOV  R30,R18
000353 53e0      	SUBI R30,LOW(48)
000354 0f5e      	ADD  R21,R30
000355 c0db      	RJMP _0x2020021
                 _0x202002F:
000356 2fe2      	MOV  R30,R18
000357 36e3      	CPI  R30,LOW(0x63)
000358 f449      	BRNE _0x2020035
000359 940e 049c 	CALL SUBOPT_0x3
00035b 89e8      	LDD  R30,Y+16
00035c 89f9      	LDD  R31,Y+16+1
00035d 81a4      	LDD  R26,Z+4
00035e 93aa      	ST   -Y,R26
00035f 940e 04a2 	CALL SUBOPT_0x4
000361 c0ce      	RJMP _0x2020036
                 _0x2020035:
000362 37e3      	CPI  R30,LOW(0x73)
000363 f441      	BRNE _0x2020038
000364 940e 049c 	CALL SUBOPT_0x3
000366 940e 04a8 	CALL SUBOPT_0x5
000368 940e 046e 	CALL _strlen
00036a 2f1e      	MOV  R17,R30
00036b c00a      	RJMP _0x2020039
                 _0x2020038:
00036c 37e0      	CPI  R30,LOW(0x70)
00036d f461      	BRNE _0x202003B
00036e 940e 049c 	CALL SUBOPT_0x3
000370 940e 04a8 	CALL SUBOPT_0x5
000372 940e 047a 	CALL _strlenf
000374 2f1e      	MOV  R17,R30
000375 6008      	ORI  R16,LOW(8)
                 _0x2020039:
000376 6002      	ORI  R16,LOW(2)
000377 770f      	ANDI R16,LOW(127)
000378 e030      	LDI  R19,LOW(0)
000379 c034      	RJMP _0x202003C
                 _0x202003B:
00037a 36e4      	CPI  R30,LOW(0x64)
00037b f011      	BREQ _0x202003F
00037c 36e9      	CPI  R30,LOW(0x69)
00037d f411      	BRNE _0x2020040
                 _0x202003F:
00037e 6004      	ORI  R16,LOW(4)
00037f c002      	RJMP _0x2020041
                 _0x2020040:
000380 37e5      	CPI  R30,LOW(0x75)
000381 f431      	BRNE _0x2020042
                 _0x2020041:
000382 e7e0      	LDI  R30,LOW(_tbl10_G101*2)
000383 e0f0      	LDI  R31,HIGH(_tbl10_G101*2)
000384 83ee      	STD  Y+6,R30
000385 83ff      	STD  Y+6+1,R31
000386 e015      	LDI  R17,LOW(5)
000387 c00c      	RJMP _0x2020043
                 _0x2020042:
000388 35e8      	CPI  R30,LOW(0x58)
000389 f411      	BRNE _0x2020045
00038a 6008      	ORI  R16,LOW(8)
00038b c003      	RJMP _0x2020046
                 _0x2020045:
00038c 37e8      	CPI  R30,LOW(0x78)
00038d f009      	BREQ PC+2
00038e c0a1      	RJMP _0x2020077
                 _0x2020046:
00038f e7ea      	LDI  R30,LOW(_tbl16_G101*2)
000390 e0f0      	LDI  R31,HIGH(_tbl16_G101*2)
000391 83ee      	STD  Y+6,R30
000392 83ff      	STD  Y+6+1,R31
000393 e014      	LDI  R17,LOW(4)
                 _0x2020043:
000394 ff02      	SBRS R16,2
000395 c014      	RJMP _0x2020048
000396 940e 049c 	CALL SUBOPT_0x3
000398 940e 04b2 	CALL SUBOPT_0x6
00039a 85ab      	LDD  R26,Y+11
00039b 23aa      	TST  R26
00039c f43a      	BRPL _0x2020049
00039d 85ea      	LDD  R30,Y+10
00039e 85fb      	LDD  R31,Y+10+1
00039f 940e 0522 	CALL __ANEGW1
0003a1 87ea      	STD  Y+10,R30
0003a2 87fb      	STD  Y+10+1,R31
0003a3 e24d      	LDI  R20,LOW(45)
                 _0x2020049:
0003a4 3040      	CPI  R20,0
0003a5 f011      	BREQ _0x202004A
0003a6 5f1f      	SUBI R17,-LOW(1)
0003a7 c001      	RJMP _0x202004B
                 _0x202004A:
0003a8 7f0b      	ANDI R16,LOW(251)
                 _0x202004B:
0003a9 c004      	RJMP _0x202004C
                 _0x2020048:
0003aa 940e 049c 	CALL SUBOPT_0x3
0003ac 940e 04b2 	CALL SUBOPT_0x6
                 _0x202004C:
                 _0x202003C:
0003ae fd00      	SBRC R16,0
0003af c011      	RJMP _0x202004D
                 _0x202004E:
0003b0 1715      	CP   R17,R21
0003b1 f478      	BRSH _0x2020050
0003b2 ff07      	SBRS R16,7
0003b3 c008      	RJMP _0x2020051
0003b4 ff02      	SBRS R16,2
0003b5 c004      	RJMP _0x2020052
0003b6 7f0b      	ANDI R16,LOW(251)
0003b7 2f24      	MOV  R18,R20
0003b8 5011      	SUBI R17,LOW(1)
0003b9 c001      	RJMP _0x2020053
                 _0x2020052:
0003ba e320      	LDI  R18,LOW(48)
                 _0x2020053:
0003bb c001      	RJMP _0x2020054
                 _0x2020051:
0003bc e220      	LDI  R18,LOW(32)
                 _0x2020054:
0003bd 940e 0495 	CALL SUBOPT_0x2
0003bf 5051      	SUBI R21,LOW(1)
0003c0 cfef      	RJMP _0x202004E
                 _0x2020050:
                 _0x202004D:
0003c1 2f31      	MOV  R19,R17
0003c2 ff01      	SBRS R16,1
0003c3 c017      	RJMP _0x2020055
                 _0x2020056:
0003c4 3030      	CPI  R19,0
0003c5 f0a1      	BREQ _0x2020058
0003c6 ff03      	SBRS R16,3
0003c7 c006      	RJMP _0x2020059
0003c8 81ee      	LDD  R30,Y+6
0003c9 81ff      	LDD  R31,Y+6+1
0003ca 9125      	LPM  R18,Z+
0003cb 83ee      	STD  Y+6,R30
0003cc 83ff      	STD  Y+6+1,R31
0003cd c005      	RJMP _0x202005A
                 _0x2020059:
0003ce 81ae      	LDD  R26,Y+6
0003cf 81bf      	LDD  R27,Y+6+1
0003d0 912d      	LD   R18,X+
0003d1 83ae      	STD  Y+6,R26
0003d2 83bf      	STD  Y+6+1,R27
                 _0x202005A:
0003d3 940e 0495 	CALL SUBOPT_0x2
0003d5 3050      	CPI  R21,0
0003d6 f009      	BREQ _0x202005B
0003d7 5051      	SUBI R21,LOW(1)
                 _0x202005B:
0003d8 5031      	SUBI R19,LOW(1)
0003d9 cfea      	RJMP _0x2020056
                 _0x2020058:
0003da c04b      	RJMP _0x202005C
                 _0x2020055:
                 _0x202005E:
0003db e320      	LDI  R18,LOW(48)
0003dc 81ee      	LDD  R30,Y+6
0003dd 81ff      	LDD  R31,Y+6+1
0003de 940e 0539 	CALL __GETW1PF
0003e0 87e8      	STD  Y+8,R30
0003e1 87f9      	STD  Y+8+1,R31
0003e2 81ee      	LDD  R30,Y+6
0003e3 81ff      	LDD  R31,Y+6+1
0003e4 9632      	ADIW R30,2
0003e5 83ee      	STD  Y+6,R30
0003e6 83ff      	STD  Y+6+1,R31
                 _0x2020060:
0003e7 85e8      	LDD  R30,Y+8
0003e8 85f9      	LDD  R31,Y+8+1
0003e9 85aa      	LDD  R26,Y+10
0003ea 85bb      	LDD  R27,Y+10+1
0003eb 17ae      	CP   R26,R30
0003ec 07bf      	CPC  R27,R31
0003ed f050      	BRLO _0x2020062
0003ee 5f2f      	SUBI R18,-LOW(1)
0003ef 85a8      	LDD  R26,Y+8
0003f0 85b9      	LDD  R27,Y+8+1
0003f1 85ea      	LDD  R30,Y+10
0003f2 85fb      	LDD  R31,Y+10+1
0003f3 1bea      	SUB  R30,R26
0003f4 0bfb      	SBC  R31,R27
0003f5 87ea      	STD  Y+10,R30
0003f6 87fb      	STD  Y+10+1,R31
0003f7 cfef      	RJMP _0x2020060
                 _0x2020062:
0003f8 332a      	CPI  R18,58
0003f9 f028      	BRLO _0x2020063
0003fa ff03      	SBRS R16,3
0003fb c002      	RJMP _0x2020064
0003fc 5f29      	SUBI R18,-LOW(7)
0003fd c001      	RJMP _0x2020065
                 _0x2020064:
0003fe 5d29      	SUBI R18,-LOW(39)
                 _0x2020065:
                 _0x2020063:
0003ff fd04      	SBRC R16,4
000400 c01a      	RJMP _0x2020067
000401 3321      	CPI  R18,49
000402 f420      	BRSH _0x2020069
000403 85a8      	LDD  R26,Y+8
000404 85b9      	LDD  R27,Y+8+1
000405 9711      	SBIW R26,1
000406 f409      	BRNE _0x2020068
                 _0x2020069:
000407 c009      	RJMP _0x20200D3
                 _0x2020068:
000408 1753      	CP   R21,R19
000409 f010      	BRLO _0x202006D
00040a ff00      	SBRS R16,0
00040b c001      	RJMP _0x202006E
                 _0x202006D:
00040c c013      	RJMP _0x202006C
                 _0x202006E:
00040d e220      	LDI  R18,LOW(32)
00040e ff07      	SBRS R16,7
00040f c00b      	RJMP _0x202006F
000410 e320      	LDI  R18,LOW(48)
                 _0x20200D3:
000411 6100      	ORI  R16,LOW(16)
000412 ff02      	SBRS R16,2
000413 c007      	RJMP _0x2020070
000414 7f0b      	ANDI R16,LOW(251)
000415 934a      	ST   -Y,R20
000416 940e 04a2 	CALL SUBOPT_0x4
000418 3050      	CPI  R21,0
000419 f009      	BREQ _0x2020071
00041a 5051      	SUBI R21,LOW(1)
                 _0x2020071:
                 _0x2020070:
                 _0x202006F:
                 _0x2020067:
00041b 940e 0495 	CALL SUBOPT_0x2
00041d 3050      	CPI  R21,0
00041e f009      	BREQ _0x2020072
00041f 5051      	SUBI R21,LOW(1)
                 _0x2020072:
                 _0x202006C:
000420 5031      	SUBI R19,LOW(1)
000421 85a8      	LDD  R26,Y+8
000422 85b9      	LDD  R27,Y+8+1
000423 9712      	SBIW R26,2
000424 f008      	BRLO _0x202005F
000425 cfb5      	RJMP _0x202005E
                 _0x202005F:
                 _0x202005C:
000426 ff00      	SBRS R16,0
000427 c008      	RJMP _0x2020073
                 _0x2020074:
000428 3050      	CPI  R21,0
000429 f031      	BREQ _0x2020076
00042a 5051      	SUBI R21,LOW(1)
00042b e2e0      	LDI  R30,LOW(32)
00042c 93ea      	ST   -Y,R30
00042d 940e 04a2 	CALL SUBOPT_0x4
00042f cff8      	RJMP _0x2020074
                 _0x2020076:
                 _0x2020073:
                 _0x2020077:
                 _0x2020036:
                 _0x20200D2:
000430 e010      	LDI  R17,LOW(0)
                 _0x2020021:
000431 cee0      	RJMP _0x202001C
                 _0x202001E:
000432 85ac      	LDD  R26,Y+12
000433 85bd      	LDD  R27,Y+12+1
000434 940e 0535 	CALL __GETW1P
000436 940e 0549 	CALL __LOADLOCR6
000438 9664      	ADIW R28,20
000439 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
00043a 92ff      	PUSH R15
00043b 2ef8      	MOV  R15,R24
00043c 9726      	SBIW R28,6
00043d 940e 0544 	CALL __SAVELOCR4
00043f 940e 04ba 	CALL SUBOPT_0x7
000441 9730      	SBIW R30,0
000442 f419      	BRNE _0x2020078
000443 efef      	LDI  R30,LOW(65535)
000444 efff      	LDI  R31,HIGH(65535)
000445 c023      	RJMP _0x2080001
                 _0x2020078:
000446 01de      	MOVW R26,R28
000447 9616      	ADIW R26,6
000448 940e 051e 	CALL __ADDW2R15
00044a 018d      	MOVW R16,R26
00044b 940e 04ba 	CALL SUBOPT_0x7
00044d 83ee      	STD  Y+6,R30
00044e 83ff      	STD  Y+6+1,R31
00044f e0e0      	LDI  R30,LOW(0)
000450 87e8      	STD  Y+8,R30
000451 87e9      	STD  Y+8+1,R30
000452 01de      	MOVW R26,R28
000453 961a      	ADIW R26,10
000454 940e 051e 	CALL __ADDW2R15
000456 940e 0535 	CALL __GETW1P
000458 93fa      	ST   -Y,R31
000459 93ea      	ST   -Y,R30
00045a 931a      	ST   -Y,R17
00045b 930a      	ST   -Y,R16
00045c ece6      	LDI  R30,LOW(_put_buff_G101)
00045d e0f2      	LDI  R31,HIGH(_put_buff_G101)
00045e 93fa      	ST   -Y,R31
00045f 93ea      	ST   -Y,R30
000460 01de      	MOVW R26,R28
000461 961a      	ADIW R26,10
000462 dea3      	RCALL __print_G101
000463 019f      	MOVW R18,R30
000464 81ae      	LDD  R26,Y+6
000465 81bf      	LDD  R27,Y+6+1
000466 e0e0      	LDI  R30,LOW(0)
000467 93ec      	ST   X,R30
000468 01f9      	MOVW R30,R18
                 _0x2080001:
000469 940e 054b 	CALL __LOADLOCR4
00046b 962a      	ADIW R28,10
00046c 90ff      	POP  R15
00046d 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
00046e 93ba      	ST   -Y,R27
00046f 93aa      	ST   -Y,R26
000470 91a9          ld   r26,y+
000471 91b9          ld   r27,y+
000472 27ee          clr  r30
000473 27ff          clr  r31
                 strlen0:
000474 916d          ld   r22,x+
000475 2366          tst  r22
000476 f011          breq strlen1
000477 9631          adiw r30,1
000478 cffb          rjmp strlen0
                 strlen1:
000479 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
00047a 93ba      	ST   -Y,R27
00047b 93aa      	ST   -Y,R26
00047c 27aa          clr  r26
00047d 27bb          clr  r27
00047e 91e9          ld   r30,y+
00047f 91f9          ld   r31,y+
                 strlenf0:
000480 9005      	lpm  r0,z+
000481 2000          tst  r0
000482 f011          breq strlenf1
000483 9611          adiw r26,1
000484 cffb          rjmp strlenf0
                 strlenf1:
000485 01fd          movw r30,r26
000486 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 __base_y_G100:
000316           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
000487 940e 0244 	CALL __lcd_write_data
000489 e0a3      	LDI  R26,LOW(3)
00048a e0b0      	LDI  R27,0
00048b 940c 04c1 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x1:
00048d e3a0      	LDI  R26,LOW(48)
00048e 940e 0230 	CALL __lcd_write_nibble_G100
                +
000490 e980     +LDI R24 , LOW ( 400 )
000491 e091     +LDI R25 , HIGH ( 400 )
                +__DELAY_USW_LOOP :
000492 9701     +SBIW R24 , 1
000493 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 400
000494 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x2:
000495 932a      	ST   -Y,R18
000496 85ad      	LDD  R26,Y+13
000497 85be      	LDD  R27,Y+13+1
000498 85ef      	LDD  R30,Y+15
000499 89f8      	LDD  R31,Y+15+1
00049a 9509      	ICALL
00049b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x3:
00049c 89e8      	LDD  R30,Y+16
00049d 89f9      	LDD  R31,Y+16+1
00049e 9734      	SBIW R30,4
00049f 8be8      	STD  Y+16,R30
0004a0 8bf9      	STD  Y+16+1,R31
0004a1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4:
0004a2 85ad      	LDD  R26,Y+13
0004a3 85be      	LDD  R27,Y+13+1
0004a4 85ef      	LDD  R30,Y+15
0004a5 89f8      	LDD  R31,Y+15+1
0004a6 9509      	ICALL
0004a7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x5:
0004a8 89a8      	LDD  R26,Y+16
0004a9 89b9      	LDD  R27,Y+16+1
0004aa 9614      	ADIW R26,4
0004ab 940e 0535 	CALL __GETW1P
0004ad 83ee      	STD  Y+6,R30
0004ae 83ff      	STD  Y+6+1,R31
0004af 81ae      	LDD  R26,Y+6
0004b0 81bf      	LDD  R27,Y+6+1
0004b1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x6:
0004b2 89a8      	LDD  R26,Y+16
0004b3 89b9      	LDD  R27,Y+16+1
0004b4 9614      	ADIW R26,4
0004b5 940e 0535 	CALL __GETW1P
0004b7 87ea      	STD  Y+10,R30
0004b8 87fb      	STD  Y+10+1,R31
0004b9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
0004ba 01de      	MOVW R26,R28
0004bb 961c      	ADIW R26,12
0004bc 940e 051e 	CALL __ADDW2R15
0004be 940e 0535 	CALL __GETW1P
0004c0 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0004c1 9610      	adiw r26,0
0004c2 f039      	breq __delay_ms1
                 __delay_ms0:
                +
0004c3 ea80     +LDI R24 , LOW ( 0xFA0 )
0004c4 e09f     +LDI R25 , HIGH ( 0xFA0 )
                +__DELAY_USW_LOOP :
0004c5 9701     +SBIW R24 , 1
0004c6 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA0
0004c7 95a8      	wdr
0004c8 9711      	sbiw r26,1
0004c9 f7c9      	brne __delay_ms0
                 __delay_ms1:
0004ca 9508      	ret
                 
                 	.equ __w1_port=0x08
                 	.equ __w1_bit=0x05
                 
                 _w1_init:
0004cb 27ee      	clr  r30
0004cc 9845      	cbi  __w1_port,__w1_bit
0004cd 9a3d      	sbi  __w1_port-1,__w1_bit
                +
0004ce e880     +LDI R24 , LOW ( 0x780 )
0004cf e097     +LDI R25 , HIGH ( 0x780 )
                +__DELAY_USW_LOOP :
0004d0 9701     +SBIW R24 , 1
0004d1 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x780
0004d2 983d      	cbi  __w1_port-1,__w1_bit
                +
0004d3 e48b     +LDI R24 , LOW ( 0x4B )
                +__DELAY_USB_LOOP :
0004d4 958a     +DEC R24
0004d5 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 0x4B
0004d6 9b35      	sbis __w1_port-2,__w1_bit
0004d7 9508      	ret
                +
0004d8 e380     +LDI R24 , LOW ( 0x130 )
0004d9 e091     +LDI R25 , HIGH ( 0x130 )
                +__DELAY_USW_LOOP :
0004da 9701     +SBIW R24 , 1
0004db f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x130
0004dc 9b35      	sbis __w1_port-2,__w1_bit
0004dd e0e1      	ldi  r30,1
                +
0004de e188     +LDI R24 , LOW ( 0x618 )
0004df e096     +LDI R25 , HIGH ( 0x618 )
                +__DELAY_USW_LOOP :
0004e0 9701     +SBIW R24 , 1
0004e1 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x618
0004e2 9508      	ret
                 
                 __w1_read_bit:
0004e3 9a3d      	sbi  __w1_port-1,__w1_bit
                +
0004e4 e08b     +LDI R24 , LOW ( 0xB )
                +__DELAY_USB_LOOP :
0004e5 958a     +DEC R24
0004e6 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 0xB
0004e7 983d      	cbi  __w1_port-1,__w1_bit
                +
0004e8 e38b     +LDI R24 , LOW ( 0x3B )
                +__DELAY_USB_LOOP :
0004e9 958a     +DEC R24
0004ea f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 0x3B
0004eb 9488      	clc
0004ec 9935      	sbic __w1_port-2,__w1_bit
0004ed 9408      	sec
0004ee 95e7      	ror  r30
                +
0004ef e480     +LDI R24 , LOW ( 0x140 )
0004f0 e091     +LDI R25 , HIGH ( 0x140 )
                +__DELAY_USW_LOOP :
0004f1 9701     +SBIW R24 , 1
0004f2 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x140
0004f3 9508      	ret
                 
                 __w1_write_bit:
0004f4 94e8      	clt
0004f5 9a3d      	sbi  __w1_port-1,__w1_bit
                +
0004f6 e08b     +LDI R24 , LOW ( 0xB )
                +__DELAY_USB_LOOP :
0004f7 958a     +DEC R24
0004f8 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 0xB
0004f9 fd70      	sbrc r23,0
0004fa 983d      	cbi  __w1_port-1,__w1_bit
                +
0004fb e485     +LDI R24 , LOW ( 0x45 )
                +__DELAY_USB_LOOP :
0004fc 958a     +DEC R24
0004fd f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 0x45
0004fe 9935      	sbic __w1_port-2,__w1_bit
0004ff c003      	rjmp __w1_write_bit0
000500 ff70      	sbrs r23,0
000501 c003      	rjmp __w1_write_bit1
000502 9508      	ret
                 __w1_write_bit0:
000503 ff70      	sbrs r23,0
000504 9508      	ret
                 __w1_write_bit1:
                +
000505 e28c     +LDI R24 , LOW ( 0x12C )
000506 e091     +LDI R25 , HIGH ( 0x12C )
                +__DELAY_USW_LOOP :
000507 9701     +SBIW R24 , 1
000508 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x12C
000509 983d      	cbi  __w1_port-1,__w1_bit
                +
00050a e18b     +LDI R24 , LOW ( 0x1B )
                +__DELAY_USB_LOOP :
00050b 958a     +DEC R24
00050c f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 0x1B
00050d 9468      	set
00050e 9508      	ret
                 
                 _w1_read:
00050f e068      	ldi  r22,8
                 	__w1_read0:
000510 dfd2      	rcall __w1_read_bit
000511 956a      	dec  r22
000512 f7e9      	brne __w1_read0
000513 9508      	ret
                 
                 _w1_write:
000514 2f7a      	mov  r23,r26
000515 e068      	ldi  r22,8
000516 27ee      	clr  r30
                 __w1_write0:
000517 dfdc      	rcall __w1_write_bit
000518 f426      	brtc __w1_write1
000519 9577      	ror  r23
00051a 956a      	dec  r22
00051b f7d9      	brne __w1_write0
00051c 95e3      	inc  r30
                 __w1_write1:
00051d 9508      	ret
                 
                 __ADDW2R15:
00051e 2400      	CLR  R0
00051f 0daf      	ADD  R26,R15
000520 1db0      	ADC  R27,R0
000521 9508      	RET
                 
                 __ANEGW1:
000522 95f1      	NEG  R31
000523 95e1      	NEG  R30
000524 40f0      	SBCI R31,0
000525 9508      	RET
                 
                 __ASRW4:
000526 95f5      	ASR  R31
000527 95e7      	ROR  R30
                 __ASRW3:
000528 95f5      	ASR  R31
000529 95e7      	ROR  R30
                 __ASRW2:
00052a 95f5      	ASR  R31
00052b 95e7      	ROR  R30
00052c 95f5      	ASR  R31
00052d 95e7      	ROR  R30
00052e 9508      	RET
                 
                 __CBD1:
00052f 2ffe      	MOV  R31,R30
000530 0fff      	ADD  R31,R31
000531 0bff      	SBC  R31,R31
000532 2f6f      	MOV  R22,R31
000533 2f7f      	MOV  R23,R31
000534 9508      	RET
                 
                 __GETW1P:
000535 91ed      	LD   R30,X+
000536 91fc      	LD   R31,X
000537 9711      	SBIW R26,1
000538 9508      	RET
                 
                 __GETW1PF:
000539 9005      	LPM  R0,Z+
00053a 91f4      	LPM  R31,Z
00053b 2de0      	MOV  R30,R0
00053c 9508      	RET
                 
                 __PUTPARD1:
00053d 937a      	ST   -Y,R23
00053e 936a      	ST   -Y,R22
00053f 93fa      	ST   -Y,R31
000540 93ea      	ST   -Y,R30
000541 9508      	RET
                 
                 __SAVELOCR6:
000542 935a      	ST   -Y,R21
                 __SAVELOCR5:
000543 934a      	ST   -Y,R20
                 __SAVELOCR4:
000544 933a      	ST   -Y,R19
                 __SAVELOCR3:
000545 932a      	ST   -Y,R18
                 __SAVELOCR2:
000546 931a      	ST   -Y,R17
000547 930a      	ST   -Y,R16
000548 9508      	RET
                 
                 __LOADLOCR6:
000549 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
00054a 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
00054b 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00054c 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
00054d 8119      	LDD  R17,Y+1
00054e 8108      	LD   R16,Y
00054f 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega328P register use summary:
r0 :  15 r1 :   1 r2 :   0 r3 :  11 r4 :  11 r5 :   4 r6 :   5 r7 :   2 
r8 :   4 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   4 
r16:  40 r17:  34 r18:  32 r19:  16 r20:  18 r21:  23 r22:  10 r23:   7 
r24:  45 r25:  11 r26: 125 r27:  44 r28:  22 r29:   1 r30: 332 r31: 100 
x  :  25 y  : 201 z  :  16 
Registers used: 28 out of 35 (80.0%)

ATmega328P instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   3 add   :   8 
adiw  :  29 and   :   0 andi  :  12 asr   :   5 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  21 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  12 
brlt  :   0 brmi  :   1 brne  :  44 brpl  :   1 brsh  :  11 brtc  :   1 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  66 
cbi   :  11 cbr   :   0 clc   :   1 clh   :   0 cli   :   3 cln   :   0 
clr   :   9 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   2 
cp    :  13 cpc   :  11 cpi   :  39 cpse  :   0 dec   :  12 des   :   0 
eor   :   2 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   3 inc   :   4 jmp   :  29 ld    :  32 ldd   :  89 ldi   : 188 
lds   :   2 lpm   :  16 lsl   :   3 lsr   :   2 mov   :  34 movw  :  18 
mul   :   1 muls  :   0 mulsu :   0 neg   :   3 nop   :   0 or    :   7 
ori   :   9 out   :  25 pop   :   3 push  :   3 rcall :  29 ret   :  37 
reti  :   2 rjmp  :  76 rol   :   0 ror   :   7 sbc   :   2 sbci  :   2 
sbi   :  10 sbic  :   2 sbis  :   2 sbiw  :  28 sbr   :   0 sbrc  :   3 
sbrs  :  13 sec   :   1 seh   :   0 sei   :   3 sen   :   0 ser   :   0 
ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  75 std   :  33 sts   :  37 sub   :   1 subi  :  23 swap  :   5 
tst   :   4 wdr   :   1 
Instructions used: 68 out of 116 (58.6%)

ATmega328P memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000aa0   2638     82   2720   32768   8.3%
[.dseg] 0x000100 0x00031a      0     26     26    2048   1.3%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 8 warnings
